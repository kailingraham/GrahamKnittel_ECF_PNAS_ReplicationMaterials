#-------------------------------------------------------------------------------
#
# FIPS Code Data for US states and counties
#
# (Sourced from ``tidycensus`` package in R)
# Dimensions: 3247 rows and 5 columns
#
#-------------------------------------------------------------------------------
# Extract built-in dataset
data("fips_codes")
# Rename and remove duplicate dataframe
FIPS <- fips_codes %>% rename_all(., .funs = toupper) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Parish", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Borough", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "city", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Census Area", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "La Salle", "LaSalle"))
rm(fips_codes)
# List of states from FIPS data-set
states_all <- as.character(FIPS %>% select(c(1)) %>% unique() %>% slice_head(n = 51) %>% pull(STATE))
#-------------------------------------------------------------------------------
#
# American Community Survey (ACS) (2020)
# 5-Year survey data from 2016-2020 on population demographic, income, and
# vehicle use
#
# References:
# Table IDs: https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html
# Table Lists: https://www.census.gov/programs-surveys/acs/technical-documentation/table-shells.2020.html#list-tab-JA0S0NE51ITOL8Y409
#
#-------------------------------------------------------------------------------
# Census API Key (Required the first time only)
#census_api_key("1b5678a1a374e17f9c32c8981fbe81d8f437edc7", install = TRUE)
# Run to reload R environment with API Key without restarting it. (Required the first time only)
#readRenviron("~/.Renviron")
# Census API Key in R environment
Sys.getenv("1b5678a1a374e17f9c32c8981fbe81d8f437edc7")
# Load data on variables in ACS and create lists with relevant variables
vars_characters <- 'B01003_001|B06009_|B19001_|B19013_|B24031'
vars_subject <- 'S2403'
vars_profile <- 'DP05'
vars_characters_data <- load_variables(2020, "acs5", cache = TRUE) %>%
filter(grepl(vars_characters, name))
vars_characters_list <- as.character(vars_characters_data %>% pull(name))
# vars_characters_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", gsub("$", "", gsub(",", "", as.character(vars_characters_data %>% pull(label))))))))
vars_subject_data <- load_variables(2020, "acs5/subject", cache = TRUE) %>%
filter(grepl(vars_subject, name))
vars_subject_list <- as.character(vars_subject_data %>% pull(name))
vars_profile_data <- load_variables(2020, "acs5/profile", cache = TRUE) %>%
filter(grepl(vars_profile, name))
vars_profile_list <- as.character(vars_profile_data %>% pull(name))
vars_tract_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_data <- load_variables(2020, "acs5", cache = TRUE) %>%
#   filter(grepl('B19019_|B08133_001|B08130_001', name))
vars_county_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", as.character(vars_county_data %>% pull(label))))))
#-------------------------------------------------------------------------------
#
# ACS Tract Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``tract`` level data for all states and relevant variables
# ACS_TRACT <- get_acs(geography = "tract", variables = vars_tract_list, year = 2020, state = '01',
#                      output = "wide", geometry = TRUE)
# OR Run line below
#ACS_TRACT <- readRDS(file = "Data/Temp Data/acs_tract.rds")
# ACS_TRACT_CLEAN <- ACS_TRACT %>% select(-ends_with("M")) %>%
#   rename(POPULATION = B01003_001E,
#          HH_INC_BELOW_10000 = B19001_002E,
#          HH_INC_10000_TO_14999 = B19001_003E,
#          HH_INC_15000_TO_19999 = B19001_004E,
#          HH_INC_20000_TO_24999 = B19001_005E,
#          HH_INC_25000_TO_29999 = B19001_006E,
#          HH_INC_30000_TO_34999 = B19001_007E,
#          HH_INC_35000_TO_39999 = B19001_008E,
#          HH_INC_40000_TO_44999 = B19001_009E,
#          HH_INC_45000_TO_49999 = B19001_010E,
#          HH_INC_50000_TO_59999 = B19001_011E,
#          HH_INC_60000_TO_74999 = B19001_012E,
#          HH_INC_75000_TO_99999 = B19001_013E,
#          HH_INC_100000_TO_124999 = B19001_014E,
#          HH_INC_125000_TO_149999 = B19001_015E,
#          HH_INC_150000_TO_199999 = B19001_016E,
#          HH_INC_ABOVE_200000 = B19001_017E,
#          MEDIAN_INCOME_INF_ADJ = B19013_001E,
#          B24031,
#          B24010
#   ) %>%
#   select(-starts_with(c("B0", "B1", "S2"))) %>%
#   separate(NAME, c("CENSUS_TRACT", "COUNTY", "STATE"), ", ")
#-------------------------------------------------------------------------------
#
# ACS County Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``county`` level data for all states and relevant variables
ACS_COUNTY <- get_acs(geography = "county", variables = vars_county_list, year = 2020, state = '01', output = "wide") %>%
select(-ends_with("M"))
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("xlsx")
library("xlsx")
write.xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
# The Roosevelt Project
# Distributed Effects of Climate Policy: A Machine Learning Approach
# Author(s): Green and Knittel
# Code: Saraf (ssaraf@mit.edu)
# Technical specifications: R version 4.1.1 (Mac OS Monterey 12.6)
# Last Updated: 09/26/2022
#-------------------------------------------------------------------------------
#
# In this code:
# (1) Load data from American Community Survey
#
#-------------------------------------------------------------------------------
# Clear all before running code
rm(list = ls())
# Set seed for replication
set.seed(092022)
# Creating a packages repository
packages <- c("tidycensus", "tidyverse", "fastDummies", "sf", "units", "foreign",
"glmnet", "reshape2", "survey", "haven", "glinternet",
"sampleSelection", "data.table", "dplyr", "tidyr", "stringr",
"magrittr", "readr", "srvyr", "ggplot2", "rvest", "xml2", "viridis")
# Install ALL packages (Use this step if not already installed)
# lapply(packages, install.packages)
# Load ALL packages
lapply(packages, library, character.only = TRUE)
# Set working directory
#setwd("~/Dropbox (MIT)/Project_roosevelt/")
#-------------------------------------------------------------------------------
#
# FIPS Code Data for US states and counties
#
# (Sourced from ``tidycensus`` package in R)
# Dimensions: 3247 rows and 5 columns
#
#-------------------------------------------------------------------------------
# Extract built-in dataset
data("fips_codes")
# Rename and remove duplicate dataframe
FIPS <- fips_codes %>% rename_all(., .funs = toupper) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Parish", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Borough", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "city", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Census Area", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "La Salle", "LaSalle"))
rm(fips_codes)
# List of states from FIPS data-set
states_all <- as.character(FIPS %>% select(c(1)) %>% unique() %>% slice_head(n = 51) %>% pull(STATE))
#-------------------------------------------------------------------------------
#
# American Community Survey (ACS) (2020)
# 5-Year survey data from 2016-2020 on population demographic, income, and
# vehicle use
#
# References:
# Table IDs: https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html
# Table Lists: https://www.census.gov/programs-surveys/acs/technical-documentation/table-shells.2020.html#list-tab-JA0S0NE51ITOL8Y409
#
#-------------------------------------------------------------------------------
# Census API Key (Required the first time only)
#census_api_key("1b5678a1a374e17f9c32c8981fbe81d8f437edc7", install = TRUE)
# Run to reload R environment with API Key without restarting it. (Required the first time only)
#readRenviron("~/.Renviron")
# Census API Key in R environment
Sys.getenv("1b5678a1a374e17f9c32c8981fbe81d8f437edc7")
# Load data on variables in ACS and create lists with relevant variables
vars_characters <- 'B01003_001|B06009_|B19001_|B19013_|B24031'
vars_subject <- 'S2403'
vars_profile <- 'DP05'
vars_characters_data <- load_variables(2020, "acs5", cache = TRUE) %>%
filter(grepl(vars_characters, name))
vars_characters_list <- as.character(vars_characters_data %>% pull(name))
# vars_characters_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", gsub("$", "", gsub(",", "", as.character(vars_characters_data %>% pull(label))))))))
vars_subject_data <- load_variables(2020, "acs5/subject", cache = TRUE) %>%
filter(grepl(vars_subject, name))
vars_subject_list <- as.character(vars_subject_data %>% pull(name))
vars_profile_data <- load_variables(2020, "acs5/profile", cache = TRUE) %>%
filter(grepl(vars_profile, name))
vars_profile_list <- as.character(vars_profile_data %>% pull(name))
vars_tract_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_data <- load_variables(2020, "acs5", cache = TRUE) %>%
#   filter(grepl('B19019_|B08133_001|B08130_001', name))
vars_county_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", as.character(vars_county_data %>% pull(label))))))
#-------------------------------------------------------------------------------
#
# ACS Tract Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``tract`` level data for all states and relevant variables
# ACS_TRACT <- get_acs(geography = "tract", variables = vars_tract_list, year = 2020, state = '01',
#                      output = "wide", geometry = TRUE)
# OR Run line below
#ACS_TRACT <- readRDS(file = "Data/Temp Data/acs_tract.rds")
# ACS_TRACT_CLEAN <- ACS_TRACT %>% select(-ends_with("M")) %>%
#   rename(POPULATION = B01003_001E,
#          HH_INC_BELOW_10000 = B19001_002E,
#          HH_INC_10000_TO_14999 = B19001_003E,
#          HH_INC_15000_TO_19999 = B19001_004E,
#          HH_INC_20000_TO_24999 = B19001_005E,
#          HH_INC_25000_TO_29999 = B19001_006E,
#          HH_INC_30000_TO_34999 = B19001_007E,
#          HH_INC_35000_TO_39999 = B19001_008E,
#          HH_INC_40000_TO_44999 = B19001_009E,
#          HH_INC_45000_TO_49999 = B19001_010E,
#          HH_INC_50000_TO_59999 = B19001_011E,
#          HH_INC_60000_TO_74999 = B19001_012E,
#          HH_INC_75000_TO_99999 = B19001_013E,
#          HH_INC_100000_TO_124999 = B19001_014E,
#          HH_INC_125000_TO_149999 = B19001_015E,
#          HH_INC_150000_TO_199999 = B19001_016E,
#          HH_INC_ABOVE_200000 = B19001_017E,
#          MEDIAN_INCOME_INF_ADJ = B19013_001E,
#          B24031,
#          B24010
#   ) %>%
#   select(-starts_with(c("B0", "B1", "S2"))) %>%
#   separate(NAME, c("CENSUS_TRACT", "COUNTY", "STATE"), ", ")
#-------------------------------------------------------------------------------
#
# ACS County Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``county`` level data for all states and relevant variables
ACS_COUNTY <- get_acs(geography = "county", variables = vars_county_list, year = 2020, state = '01', output = "wide") %>%
select(-ends_with("M"))
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("xlsx")
write.xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
write.xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx", append=TRUE)
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("openxlsx")
library("openxlsx")
write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx", append=TRUE)
library(openxlsx)
write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx", append=TRUE)
library(writexl)
write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx", append=TRUE)
write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("openxlsx")
library(writexl)
install.packages("openxlsx")
write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
variable_name <- read_excel("ACS_var_names_crosswalk.xlsx")
variable_name <- read_xlsx("ACS_var_names_crosswalk.xlsx")
library(openxlsx)
library(readxl)
variable_name <- read.xlsx("ACS_var_names_crosswalk.xlsx")
colnames(ACS_COUNTY) <- t(variable_name[,'col_name_final'])
View(ACS_COUNTY)
ACS_COUNTY_CLEAN <- ACS_COUNTY  %>%  select(-starts_with(c("B0", "B1", "B2", "DP", "S2"))) %>% separate(NAME, c("COUNTY", "STATE"), ", ")
source("C:/Users/kgraham1/OneDrive - Massachusetts Institute of Technology/CEEPR/Carbon footprint project/ACS/ACS_data_ECF.R", echo=TRUE)
install.packages("openxlsx")
View(ACS_COUNTY_CLEAN)
source("C:/Users/kgraham1/OneDrive - Massachusetts Institute of Technology/CEEPR/Carbon footprint project/ACS/ACS_data_ECF.R", echo=TRUE)
variable_name <- read_excel("ACS_var_names_crosswalk.xlsx")
colnames(ACS_COUNTY) <- t(variable_name[,'col_name_final'])
ACS_COUNTY_CLEAN <- ACS_COUNTY  %>%  select(-starts_with(c("B0", "B1", "B2", "DP", "S2"))) %>% separate(NAME, c("COUNTY", "STATE"), ", ")
# %>% filter(!complete.cases(STATE))
# Check if NA values present
colSums(is.na(ACS_COUNTY_CLEAN))
write.csv(ACS_COUNTY_CLEAN, "ACS_COUNTY_CLEAN.csv")
source("C:/Users/kaili/OneDrive - Massachusetts Institute of Technology/CEEPR/Carbon footprint project/ACS/Data/ACS/ACS_data_ECF.R", echo=TRUE)
#-------------------------------------------------------------------------------
#
# ACS County Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``county`` level data for all states and relevant variables
ACS_COUNTY <- get_acs(geography = "county", variables = vars_county_list, year = 2020, state = states_all, output = "wide") %>%
select(-ends_with("M"))
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("openxlsx")
library(writexl)
library(readxl)
variable_name <- read_excel("ACS_var_names_crosswalk.xlsx")
colnames(ACS_COUNTY) <- t(variable_name[,'col_name_final'])
ACS_COUNTY_CLEAN <- ACS_COUNTY  %>%  select(-starts_with(c("B0", "B1", "B2", "DP", "S2"))) %>% separate(NAME, c("COUNTY", "STATE"), ", ")
# %>% filter(!complete.cases(STATE))
# Check if NA values present
colSums(is.na(ACS_COUNTY_CLEAN))
write.csv(ACS_COUNTY_CLEAN, "ACS_COUNTY_CLEAN.csv")
write.csv(ACS_COUNTY_CLEAN, "ACS_COUNTY_CLEAN.csv")
write.csv(ACS_COUNTY_CLEAN, "ACS_COUNTY_CLEAN.csv")
# The Roosevelt Project
# Distributed Effects of Climate Policy: A Machine Learning Approach
# Author(s): Green and Knittel
# Code: Saraf (ssaraf@mit.edu)
# Technical specifications: R version 4.1.1 (Mac OS Monterey 12.6)
# Last Updated: 09/26/2022
#-------------------------------------------------------------------------------
#
# In this code:
# (1) Load data from American Community Survey
#
#-------------------------------------------------------------------------------
# Clear all before running code
rm(list = ls())
# Set seed for replication
set.seed(092022)
# Creating a packages repository
packages <- c("tidycensus", "tidyverse", "fastDummies", "sf", "units", "foreign",
"glmnet", "reshape2", "survey", "haven", "glinternet",
"sampleSelection", "data.table", "dplyr", "tidyr", "stringr",
"magrittr", "readr", "srvyr", "ggplot2", "rvest", "xml2", "viridis")
# Install ALL packages (Use this step if not already installed)
# lapply(packages, install.packages)
# Load ALL packages
lapply(packages, library, character.only = TRUE)
# Set working directory
#setwd("~/Dropbox (MIT)/Project_roosevelt/")
#-------------------------------------------------------------------------------
#
# FIPS Code Data for US states and counties
#
# (Sourced from ``tidycensus`` package in R)
# Dimensions: 3247 rows and 5 columns
#
#-------------------------------------------------------------------------------
# Extract built-in dataset
data("fips_codes")
# Rename and remove duplicate dataframe
FIPS <- fips_codes %>% rename_all(., .funs = toupper) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Parish", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Borough", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "city", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Census Area", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "La Salle", "LaSalle"))
rm(fips_codes)
# List of states from FIPS data-set
states_all <- as.character(FIPS %>% select(c(1)) %>% unique() %>% slice_head(n = 51) %>% pull(STATE))
#-------------------------------------------------------------------------------
#
# American Community Survey (ACS) (2020)
# 5-Year survey data from 2016-2020 on population demographic, income, and
# vehicle use
#
# References:
# Table IDs: https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html
# Table Lists: https://www.census.gov/programs-surveys/acs/technical-documentation/table-shells.2020.html#list-tab-JA0S0NE51ITOL8Y409
#
#-------------------------------------------------------------------------------
# Census API Key (Required the first time only)
#census_api_key("1b5678a1a374e17f9c32c8981fbe81d8f437edc7", install = TRUE)
# Run to reload R environment with API Key without restarting it. (Required the first time only)
#readRenviron("~/.Renviron")
# Census API Key in R environment
Sys.getenv("1b5678a1a374e17f9c32c8981fbe81d8f437edc7")
# Load data on variables in ACS and create lists with relevant variables
vars_characters <- 'B01003_001|B06009_|B19001_|B19013_|B24031'
vars_subject <- 'S2403'
vars_profile <- 'DP05'
vars_characters_data <- load_variables(2020, "acs5", cache = TRUE) %>%
filter(grepl(vars_characters, name))
vars_characters_list <- as.character(vars_characters_data %>% pull(name))
# vars_characters_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", gsub("$", "", gsub(",", "", as.character(vars_characters_data %>% pull(label))))))))
vars_subject_data <- load_variables(2020, "acs5/subject", cache = TRUE) %>%
filter(grepl(vars_subject, name))
vars_subject_list <- as.character(vars_subject_data %>% pull(name))
vars_profile_data <- load_variables(2020, "acs5/profile", cache = TRUE) %>%
filter(grepl(vars_profile, name))
vars_profile_list <- as.character(vars_profile_data %>% pull(name))
vars_tract_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_data <- load_variables(2020, "acs5", cache = TRUE) %>%
#   filter(grepl('B19019_|B08133_001|B08130_001', name))
vars_county_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
# vars_county_colname <- gsub("Estimate!!", "", gsub(":!!", "_", gsub("-", "_", gsub(" ", "_", as.character(vars_county_data %>% pull(label))))))
#-------------------------------------------------------------------------------
#
# ACS Tract Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``tract`` level data for all states and relevant variables
# ACS_TRACT <- get_acs(geography = "tract", variables = vars_tract_list, year = 2020, state = '01',
#                      output = "wide", geometry = TRUE)
# OR Run line below
#ACS_TRACT <- readRDS(file = "Data/Temp Data/acs_tract.rds")
# ACS_TRACT_CLEAN <- ACS_TRACT %>% select(-ends_with("M")) %>%
#   rename(POPULATION = B01003_001E,
#          HH_INC_BELOW_10000 = B19001_002E,
#          HH_INC_10000_TO_14999 = B19001_003E,
#          HH_INC_15000_TO_19999 = B19001_004E,
#          HH_INC_20000_TO_24999 = B19001_005E,
#          HH_INC_25000_TO_29999 = B19001_006E,
#          HH_INC_30000_TO_34999 = B19001_007E,
#          HH_INC_35000_TO_39999 = B19001_008E,
#          HH_INC_40000_TO_44999 = B19001_009E,
#          HH_INC_45000_TO_49999 = B19001_010E,
#          HH_INC_50000_TO_59999 = B19001_011E,
#          HH_INC_60000_TO_74999 = B19001_012E,
#          HH_INC_75000_TO_99999 = B19001_013E,
#          HH_INC_100000_TO_124999 = B19001_014E,
#          HH_INC_125000_TO_149999 = B19001_015E,
#          HH_INC_150000_TO_199999 = B19001_016E,
#          HH_INC_ABOVE_200000 = B19001_017E,
#          MEDIAN_INCOME_INF_ADJ = B19013_001E,
#          B24031,
#          B24010
#   ) %>%
#   select(-starts_with(c("B0", "B1", "S2"))) %>%
#   separate(NAME, c("CENSUS_TRACT", "COUNTY", "STATE"), ", ")
#-------------------------------------------------------------------------------
#
# ACS County Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``county`` level data for all states and relevant variables
ACS_COUNTY <- get_acs(geography = "county", variables = vars_county_list, year = 2020, state = states_all, output = "wide") %>%
select(-ends_with("M"))
# setnames(ACS_COUNTY, c('GEOID','NAME', vars_county_colname))
install.packages("openxlsx")
library(writexl)
library(readxl)
# write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
variable_name <- read_excel("ACS_var_names_crosswalk.xlsx")
colnames(ACS_COUNTY) <- t(variable_name[,'col_name_final'])
ACS_COUNTY_CLEAN <- ACS_COUNTY  %>%  select(-starts_with(c("B0", "B1", "B2", "DP", "S2"))) %>% separate(NAME, c("COUNTY", "STATE"), ", ")
# The Roosevelt Project
# Distributed Effects of Climate Policy: A Machine Learning Approach
# Author(s): Green and Knittel
# Code: Saraf (ssaraf@mit.edu), edited by Kailin Graham (kgraham1@mit.edu)
# Technical specifications: R version 4.1.1 (Mac OS Monterey 12.6)
# Last Updated: 09/26/2022
#-------------------------------------------------------------------------------
#
# In this code:
# (1) Load data from American Community Survey
#
#-------------------------------------------------------------------------------
# Clear all before running code
rm(list = ls())
# Set seed for replication
set.seed(092022)
# Creating a packages repository
packages <- c("tidycensus", "tidyverse", "fastDummies", "sf", "units", "foreign",
"glmnet", "reshape2", "survey", "haven", "glinternet",
"sampleSelection", "data.table", "dplyr", "tidyr", "stringr",
"magrittr", "readr", "srvyr", "ggplot2", "rvest", "xml2", "viridis")
# Install ALL packages (Use this step if not already installed)
# lapply(packages, install.packages)
# Load ALL packages
lapply(packages, library, character.only = TRUE)
install.packages("openxlsx")
library(writexl)
library(readxl)
# Set working directory
#setwd("~/Dropbox (MIT)/Project_roosevelt/")
#-------------------------------------------------------------------------------
#
# FIPS Code Data for US states and counties
#
# (Sourced from ``tidycensus`` package in R)
# Dimensions: 3247 rows and 5 columns
#
#-------------------------------------------------------------------------------
# Extract built-in dataset
data("fips_codes")
# Rename and remove duplicate dataframe
FIPS <- fips_codes %>% rename_all(., .funs = toupper) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Parish", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Borough", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "city", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "Census Area", "County")) %>%
mutate(COUNTY = str_replace_all(COUNTY, "La Salle", "LaSalle"))
rm(fips_codes)
# List of states from FIPS data-set
states_all <- as.character(FIPS %>% select(c(1)) %>% unique() %>% slice_head(n = 51) %>% pull(STATE))
#-------------------------------------------------------------------------------
#
# American Community Survey (ACS) (2020)
# 5-Year survey data from 2016-2020 on population demographic, income, and
# vehicle use
#
# References:
# Table IDs: https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html
# Table Lists: https://www.census.gov/programs-surveys/acs/technical-documentation/table-shells.2020.html#list-tab-JA0S0NE51ITOL8Y409
#
#-------------------------------------------------------------------------------
# Census API Key (Required the first time only)
#census_api_key("1b5678a1a374e17f9c32c8981fbe81d8f437edc7", install = TRUE)
# Run to reload R environment with API Key without restarting it. (Required the first time only)
#readRenviron("~/.Renviron")
# Census API Key in R environment
Sys.getenv("1b5678a1a374e17f9c32c8981fbe81d8f437edc7")
# Load data on variables in ACS and create lists with relevant variables
### CHANGE TALBEIDS OF INTEREST HERE ###
vars_characters <- 'B01003_001|B06009_|B19001_|B19013_|B24031|B23025_|B06004H_|B17025_|B06012_|B05006_'
vars_subject <- 'S2403'
vars_profile <- 'DP05'
vars_characters_data <- load_variables(2020, "acs5", cache = TRUE) %>%
filter(grepl(vars_characters, name))
vars_characters_list <- as.character(vars_characters_data %>% pull(name))
vars_subject_data <- load_variables(2020, "acs5/subject", cache = TRUE) %>%
filter(grepl(vars_subject, name))
vars_subject_list <- as.character(vars_subject_data %>% pull(name))
vars_profile_data <- load_variables(2020, "acs5/profile", cache = TRUE) %>%
filter(grepl(vars_profile, name))
vars_profile_list <- as.character(vars_profile_data %>% pull(name))
vars_county_list <- c(vars_characters_list, vars_subject_list, vars_profile_list)
#-------------------------------------------------------------------------------
#
# ACS County Level Data
#
#-------------------------------------------------------------------------------
# Load ACS ``county`` level data for all states and relevant variables
ACS_COUNTY <- get_acs(geography = "county", variables = vars_county_list, year = 2020, state = states_all, output = "wide") %>%
select(-ends_with("M"))
# Read in specific variables of interest and their column names from Excel file
# write_xlsx(ACS_COUNTY, "ACS_COUNTY.xlsx")
variable_name <- read_excel("C:/Users/kaili/OneDrive - Massachusetts Institute of Technology/CEEPR/Carbon footprint project/ACS/Data/ACS/ACS_var_names_crosswalk.xlsx")
